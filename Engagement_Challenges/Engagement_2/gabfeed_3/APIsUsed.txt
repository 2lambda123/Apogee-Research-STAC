Libraries
---------
commons-cli-1.3.jar
commons-fileupload-1.3.1.jar
httpcore-4.4.3.jar
commons-codec-1.9.jar
commons-io-2.2.jar
commons-lang3-3.4.jar
httpclient-4.5.1.jar
mapdb-2.0-beta8.jar

Method Use
----------
com.sun.net.httpserver.Filter()
com.sun.net.httpserver.Filter$Chain.doFilter(com.sun.net.httpserver.HttpExchange): void
com.sun.net.httpserver.Headers.add(java.lang.String,java.lang.String): void
com.sun.net.httpserver.Headers.getFirst(java.lang.String): java.lang.String
com.sun.net.httpserver.Headers.get(java.lang.Object): java.util.List
com.sun.net.httpserver.Headers.set(java.lang.String,java.lang.String): void
com.sun.net.httpserver.HttpContext.getFilters(): java.util.List
com.sun.net.httpserver.HttpExchange.close(): void
com.sun.net.httpserver.HttpExchange.getAttribute(java.lang.String): java.lang.Object
com.sun.net.httpserver.HttpExchange.getRequestBody(): java.io.InputStream
com.sun.net.httpserver.HttpExchange.getRequestHeaders(): com.sun.net.httpserver.Headers
com.sun.net.httpserver.HttpExchange.getRequestMethod(): java.lang.String
com.sun.net.httpserver.HttpExchange.getRequestURI(): java.net.URI
com.sun.net.httpserver.HttpExchange.getResponseBody(): java.io.OutputStream
com.sun.net.httpserver.HttpExchange.getResponseHeaders(): com.sun.net.httpserver.Headers
com.sun.net.httpserver.HttpExchange.sendResponseHeaders(int,long): void
com.sun.net.httpserver.HttpExchange.setAttribute(java.lang.String,java.lang.Object): void
com.sun.net.httpserver.HttpsConfigurator(javax.net.ssl.SSLContext)
com.sun.net.httpserver.HttpServer.createContext(java.lang.String,com.sun.net.httpserver.HttpHandler): com.sun.net.httpserver.HttpContext
com.sun.net.httpserver.HttpServer.setExecutor(java.util.concurrent.Executor): void
com.sun.net.httpserver.HttpServer.start(): void
com.sun.net.httpserver.HttpServer.stop(int): void
com.sun.net.httpserver.HttpsParameters.setCipherSuites(java.lang.String[]): void
com.sun.net.httpserver.HttpsParameters.setProtocols(java.lang.String[]): void
com.sun.net.httpserver.HttpsParameters.setSSLParameters(javax.net.ssl.SSLParameters): void
com.sun.net.httpserver.HttpsServer.createContext(java.lang.String,com.sun.net.httpserver.HttpHandler): com.sun.net.httpserver.HttpContext
com.sun.net.httpserver.HttpsServer.create(java.net.InetSocketAddress,int): com.sun.net.httpserver.HttpsServer
com.sun.net.httpserver.HttpsServer.setExecutor(java.util.concurrent.Executor): void
com.sun.net.httpserver.HttpsServer.setHttpsConfigurator(com.sun.net.httpserver.HttpsConfigurator): void
com.sun.net.httpserver.HttpsServer.start(): void
com.sun.net.httpserver.HttpsServer.stop(int): void
java.io.BufferedReader.close(): void
java.io.BufferedReader(java.io.Reader)
java.io.BufferedReader.readLine(): java.lang.String
java.io.DataInput.readBoolean(): boolean
java.io.DataInput.readInt(): int
java.io.DataInput.readUTF(): java.lang.String
java.io.DataOutput.writeBoolean(boolean): void
java.io.DataOutput.writeInt(int): void
java.io.DataOutput.writeUTF(java.lang.String): void
java.io.File.canWrite(): boolean
java.io.File.delete(): boolean
java.io.File.exists(): boolean
java.io.File.isDirectory(): boolean
java.io.File(java.io.File,java.lang.String)
java.io.File(java.lang.String)
java.io.File(java.lang.String,java.lang.String)
java.io.File.mkdirs(): boolean
java.io.FileReader(java.io.File)
java.io.FileReader(java.lang.String)
java.io.InputStream.close(): void
java.io.InputStreamReader.close(): void
java.io.InputStreamReader(java.io.InputStream)
java.io.InputStreamReader.read(char[]): int
java.io.IOException.printStackTrace(): void
java.io.OutputStream.write(byte[]): void
java.io.PrintStream.print(java.lang.String): void
java.io.PrintStream.println(java.lang.Object): void
java.io.PrintStream.println(java.lang.String): void
java.io.Reader.read(char[]): int
java.io.StringWriter()
java.io.StringWriter.toString(): java.lang.String
java.io.StringWriter.write(char[],int,int): void
java.lang.AssertionError()
java.lang.Boolean.parseBoolean(java.lang.String): boolean
java.lang.Boolean.toString(boolean): java.lang.String
java.lang.Byte.valueOf(byte): java.lang.Byte
java.lang.Class.desiredAssertionStatus(): boolean
java.lang.Class.getGenericInterfaces(): java.lang.reflect.Type[]
java.lang.Class.getName(): java.lang.String
java.lang.Class.getResourceAsStream(java.lang.String): java.io.InputStream
java.lang.Comparable.compareTo(java.lang.Object): int
java.lang.Exception.getMessage(): java.lang.String
java.lang.Exception(java.lang.String)
java.lang.Exception.printStackTrace(): void
java.lang.IllegalArgumentException(java.lang.String)
java.lang.IllegalArgumentException(java.lang.String,java.lang.Throwable)
java.lang.Integer.compare(int,int): int
java.lang.Integer.intValue(): int
java.lang.Integer.parseInt(java.lang.String): int
java.lang.Integer.toString(int): java.lang.String
java.lang.Integer.valueOf(int): java.lang.Integer
java.lang.Integer.valueOf(java.lang.String): java.lang.Integer
java.lang.InterruptedException.printStackTrace(): void
java.lang.Long.longValue(): long
java.lang.Long.valueOf(long): java.lang.Long
java.lang.Math.abs(int): int
java.lang.Math.floor(double): double
java.lang.Math.max(int,int): int
java.lang.Math.min(double,double): double
java.lang.Math.min(int,int): int
java.lang.Math.pow(double,double): double
java.lang.NumberFormatException.getMessage(): java.lang.String
java.lang.Object()
java.lang.Object.equals(java.lang.Object): boolean
java.lang.Object.getClass(): java.lang.Class
java.lang.Object.hashCode(): int
java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]
java.lang.reflect.ParameterizedType.getRawType(): java.lang.reflect.Type
java.lang.Runtime.addShutdownHook(java.lang.Thread): void
java.lang.RuntimeException.getMessage(): java.lang.String
java.lang.RuntimeException(java.lang.String)
java.lang.RuntimeException.printStackTrace(): void
java.lang.Runtime.getRuntime(): java.lang.Runtime
java.lang.StringBuilder()
java.lang.StringBuilder.append(char): java.lang.StringBuilder
java.lang.StringBuilder.append(int): java.lang.StringBuilder
java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder
java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder
java.lang.StringBuilder.toString(): java.lang.String
java.lang.String.charAt(int): char
java.lang.String.compareTo(java.lang.String): int
java.lang.String.contains(java.lang.CharSequence): boolean
java.lang.String.equalsIgnoreCase(java.lang.String): boolean
java.lang.String.equals(java.lang.Object): boolean
java.lang.String.format(java.lang.String,java.lang.Object[]): java.lang.String
java.lang.String.getBytes(): byte[]
java.lang.String.getBytes(java.lang.String): byte[]
java.lang.String.getBytes(java.nio.charset.Charset): byte[]
java.lang.String.indexOf(int): int
java.lang.String.indexOf(java.lang.String,int): int
java.lang.String.isEmpty(): boolean
java.lang.String.length(): int
java.lang.String.replaceAll(java.lang.String,java.lang.String): java.lang.String
java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence): java.lang.String
java.lang.String.split(java.lang.String,int): java.lang.String[]
java.lang.String.split(java.lang.String): java.lang.String[]
java.lang.String.startsWith(java.lang.String): boolean
java.lang.String.substring(int,int): java.lang.String
java.lang.String.substring(int): java.lang.String
java.lang.String.toCharArray(): char[]
java.lang.String.trim(): java.lang.String
java.lang.String.valueOf(long): java.lang.String
java.lang.System.exit(int): void
java.lang.System.identityHashCode(java.lang.Object): int
java.lang.System.nanoTime(): long
java.lang.Thread(java.lang.Runnable)
java.lang.Thread.sleep(long): void
java.lang.Throwable.addSuppressed(java.lang.Throwable): void
java.lang.Throwable.getMessage(): java.lang.String
java.lang.Throwable.printStackTrace(): void
java.math.BigInteger.add(java.math.BigInteger): java.math.BigInteger
java.math.BigInteger.bitLength(): int
java.math.BigInteger(byte[])
java.math.BigInteger.equals(java.lang.Object): boolean
java.math.BigInteger(java.lang.String)
java.math.BigInteger(java.lang.String,int)
java.math.BigInteger.mod(java.math.BigInteger): java.math.BigInteger
java.math.BigInteger.modPow(java.math.BigInteger,java.math.BigInteger): java.math.BigInteger
java.math.BigInteger.multiply(java.math.BigInteger): java.math.BigInteger
java.math.BigInteger.shiftLeft(int): java.math.BigInteger
java.math.BigInteger.shiftRight(int): java.math.BigInteger
java.math.BigInteger.subtract(java.math.BigInteger): java.math.BigInteger
java.math.BigInteger.testBit(int): boolean
java.math.BigInteger.toString(int): java.lang.String
java.math.BigInteger.toString(): java.lang.String
java.math.BigInteger.valueOf(long): java.math.BigInteger
java.net.InetSocketAddress(int)
java.net.URI.getPath(): java.lang.String
java.net.URI.getQuery(): java.lang.String
java.net.URI.toString(): java.lang.String
java.nio.file.Files.copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[]): long
java.nio.file.Paths.get(java.lang.String,java.lang.String[]): java.nio.file.Path
java.nio.file.Path.toFile(): java.io.File
java.nio.file.Path.toString(): java.lang.String
java.security.KeyStore.getInstance(java.lang.String): java.security.KeyStore
java.security.KeyStore.load(java.io.InputStream,char[]): void
java.security.SecureRandom()
java.security.SecureRandom.nextBytes(byte[]): void
java.util.AbstractMap()
java.util.AbstractMap.putAll(java.util.Map): void
java.util.AbstractMap$SimpleEntry(java.lang.Object,java.lang.Object)
java.util.ArrayList()
java.util.ArrayList.addAll(java.util.Collection): boolean
java.util.ArrayList.add(java.lang.Object): boolean
java.util.ArrayList(int)
java.util.ArrayList(java.util.Collection)
java.util.Arrays.asList(java.lang.Object[]): java.util.List
java.util.Arrays.equals(byte[],byte[]): boolean
java.util.Collection.add(java.lang.Object): boolean
java.util.Collection.isEmpty(): boolean
java.util.Collection.iterator(): java.util.Iterator
java.util.Collections.emptyList(): java.util.List
java.util.Collections.reverse(java.util.List): void
java.util.Collections.singletonList(java.lang.Object): java.util.List
java.util.Collections.singletonMap(java.lang.Object,java.lang.Object): java.util.Map
java.util.Collections.unmodifiableList(java.util.List): java.util.List
java.util.Comparator.compare(java.lang.Object,java.lang.Object): int
java.util.concurrent.TimeUnit.convert(long,java.util.concurrent.TimeUnit): long
java.util.Date()
java.util.Date.compareTo(java.util.Date): int
java.util.Date.toString(): java.lang.String
java.util.HashSet()
java.util.HashSet(java.util.Collection)
java.util.Iterator.hasNext(): boolean
java.util.Iterator.next(): java.lang.Object
java.util.LinkedHashSet()
java.util.LinkedHashSet(int)
java.util.LinkedList()
java.util.LinkedList.add(java.lang.Object): boolean
java.util.LinkedList(java.util.Collection)
java.util.List.addAll(java.util.Collection): boolean
java.util.List.add(java.lang.Object): boolean
java.util.List.contains(java.lang.Object): boolean
java.util.List.get(int): java.lang.Object
java.util.List.isEmpty(): boolean
java.util.List.iterator(): java.util.Iterator
java.util.List.set(int,java.lang.Object): java.lang.Object
java.util.List.size(): int
java.util.Map.containsKey(java.lang.Object): boolean
java.util.Map$Entry.getKey(): java.lang.Object
java.util.Map$Entry.getValue(): java.lang.Object
java.util.Map.get(java.lang.Object): java.lang.Object
java.util.Map.keySet(): java.util.Set
java.util.Map.put(java.lang.Object,java.lang.Object): java.lang.Object
java.util.Map.remove(java.lang.Object): java.lang.Object
java.util.Map.size(): int
java.util.Map.values(): java.util.Collection
java.util.Random()
java.util.Random.nextDouble(): double
java.util.regex.Matcher.end(): int
java.util.regex.Matcher.find(): boolean
java.util.regex.Matcher.start(): int
java.util.regex.Pattern.compile(java.lang.String): java.util.regex.Pattern
java.util.regex.Pattern.matcher(java.lang.CharSequence): java.util.regex.Matcher
java.util.Set.add(java.lang.Object): boolean
java.util.Set.containsAll(java.util.Collection): boolean
java.util.Set.contains(java.lang.Object): boolean
java.util.Set.iterator(): java.util.Iterator
java.util.Set.remove(java.lang.Object): boolean
java.util.Set.size(): int
java.util.Stack()
java.util.Stack.empty(): boolean
java.util.Stack.isEmpty(): boolean
java.util.Stack.pop(): java.lang.Object
java.util.Stack.push(java.lang.Object): java.lang.Object
java.util.TreeMap()
java.util.TreeSet(java.util.Comparator)
java.util.UUID.randomUUID(): java.util.UUID
java.util.UUID.toString(): java.lang.String
java.util.Vector.isEmpty(): boolean
javax.net.ssl.KeyManagerFactory.getInstance(java.lang.String): javax.net.ssl.KeyManagerFactory
javax.net.ssl.KeyManagerFactory.getKeyManagers(): javax.net.ssl.KeyManager[]
javax.net.ssl.KeyManagerFactory.init(java.security.KeyStore,char[]): void
javax.net.ssl.SSLContext.createSSLEngine(): javax.net.ssl.SSLEngine
javax.net.ssl.SSLContext.getDefault(): javax.net.ssl.SSLContext
javax.net.ssl.SSLContext.getDefaultSSLParameters(): javax.net.ssl.SSLParameters
javax.net.ssl.SSLContext.getInstance(java.lang.String): javax.net.ssl.SSLContext
javax.net.ssl.SSLContext.init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom): void
javax.net.ssl.SSLEngine.getEnabledProtocols(): java.lang.String[]
org.apache.commons.cli.CommandLine.getOptionValue(java.lang.String): java.lang.String
org.apache.commons.cli.CommandLine.hasOption(java.lang.String): boolean
org.apache.commons.cli.CommandLineParser.parse(org.apache.commons.cli.Options,java.lang.String[]): org.apache.commons.cli.CommandLine
org.apache.commons.cli.DefaultParser()
org.apache.commons.cli.HelpFormatter()
org.apache.commons.cli.HelpFormatter.printHelp(java.lang.String,org.apache.commons.cli.Options): void
org.apache.commons.cli.Option(java.lang.String,java.lang.String,boolean,java.lang.String)
org.apache.commons.cli.Options()
org.apache.commons.cli.Options.addOption(java.lang.String,boolean,java.lang.String): org.apache.commons.cli.Options
org.apache.commons.cli.Options.addOption(java.lang.String,java.lang.String,boolean,java.lang.String): org.apache.commons.cli.Options
org.apache.commons.cli.Options.addOption(org.apache.commons.cli.Option): org.apache.commons.cli.Options
org.apache.commons.cli.Option.setType(java.lang.Class): void
org.apache.commons.cli.ParseException.getMessage(): java.lang.String
org.apache.commons.codec.binary.Base64.encodeBase64String(byte[]): java.lang.String
org.apache.commons.fileupload.disk.DiskFileItemFactory()
org.apache.commons.fileupload.FileItem.getInputStream(): java.io.InputStream
org.apache.commons.fileupload.FileItem.getName(): java.lang.String
org.apache.commons.fileupload.FileItem.getString(): java.lang.String
org.apache.commons.fileupload.FileItemIterator.hasNext(): boolean
org.apache.commons.fileupload.FileItemIterator.next(): org.apache.commons.fileupload.FileItemStream
org.apache.commons.fileupload.FileItemStream.getFieldName(): java.lang.String
org.apache.commons.fileupload.FileItemStream.openStream(): java.io.InputStream
org.apache.commons.fileupload.FileUpload()
org.apache.commons.fileupload.FileUploadBase.getItemIterator(org.apache.commons.fileupload.RequestContext): org.apache.commons.fileupload.FileItemIterator
org.apache.commons.fileupload.FileUploadBase.parseParameterMap(org.apache.commons.fileupload.RequestContext): java.util.Map
org.apache.commons.fileupload.FileUpload.getItemIterator(org.apache.commons.fileupload.RequestContext): org.apache.commons.fileupload.FileItemIterator
org.apache.commons.fileupload.FileUpload.parseParameterMap(org.apache.commons.fileupload.RequestContext): java.util.Map
org.apache.commons.fileupload.FileUpload.setFileItemFactory(org.apache.commons.fileupload.FileItemFactory): void
org.apache.commons.io.FileUtils.openInputStream(java.io.File): java.io.FileInputStream
org.apache.commons.io.FileUtils.readFileToString(java.io.File): java.lang.String
org.apache.commons.io.IOUtils.copy(java.io.InputStream,java.io.Writer,java.lang.String): void
org.apache.commons.io.IOUtils.toString(java.io.InputStream,java.lang.String): java.lang.String
org.apache.commons.lang3.ArrayUtils.subarray(java.lang.Object[],int,int): java.lang.Object[]
org.apache.commons.lang3.StringEscapeUtils.escapeHtml4(java.lang.String): java.lang.String
org.apache.commons.lang3.StringEscapeUtils.unescapeJava(java.lang.String): java.lang.String
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence): boolean
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence): boolean
org.apache.commons.lang3.StringUtils.join(java.lang.Object[],java.lang.String): java.lang.String
org.apache.commons.lang3.StringUtils.split(java.lang.String): java.lang.String[]
org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(java.lang.String,java.lang.String,int): java.lang.String[]
org.apache.commons.lang3.tuple.Pair.getLeft(): java.lang.Object
org.apache.commons.lang3.tuple.Pair.getRight(): java.lang.Object
org.apache.commons.lang3.tuple.Pair.of(java.lang.Object,java.lang.Object): org.apache.commons.lang3.tuple.Pair
org.apache.http.client.utils.URLEncodedUtils.parse(java.net.URI,java.lang.String): java.util.List
org.apache.http.NameValuePair.getName(): java.lang.String
org.apache.http.NameValuePair.getValue(): java.lang.String
org.mapdb.DB.close(): void
org.mapdb.DB.commit(): void
org.mapdb.DB.hashMap(java.lang.String,org.mapdb.Serializer,org.mapdb.Serializer): org.mapdb.HTreeMap
org.mapdb.DBMaker.fileDB(java.io.File): org.mapdb.DBMaker$Maker
org.mapdb.DBMaker$Maker.asyncWriteEnable(): org.mapdb.DBMaker$Maker
org.mapdb.DBMaker$Maker.fileMmapEnableIfSupported(): org.mapdb.DBMaker$Maker
org.mapdb.DBMaker$Maker.make(): org.mapdb.DB
org.mapdb.DBMaker$Maker.transactionDisable(): org.mapdb.DBMaker$Maker
org.mapdb.Serializer()
org.mapdb.Serializer.deserialize(java.io.DataInput,int): java.lang.Object
org.mapdb.Serializer.serialize(java.io.DataOutput,java.lang.Object): void
