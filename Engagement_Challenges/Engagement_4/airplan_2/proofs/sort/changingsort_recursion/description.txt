sort_2: Polymorphic sort with bad partitioning
----------------------------------------------
Algorithmic Complexity Vulnerability,
Type: Time

The sorting algorithm typically has O(nlogn) behavior but can have O(n^2) or worse
behavior depending on what recurrence relation this instance of the sort was given.
This vulnerability is triggered by incorrect division of the sorting problem, which occurs
for inputs of a certain length. This vulnerability does not depend on the contents of the collection
being sorted, only on the size of the collection.

The vulnerable code is in sort.Sorter.sort().  It is reached by the following sequence of method calls:
CapacityHandler.getContents()->GraphProxy.getCapacity()->Capacity.capacity() -> Capacity.search()->Capacity.getEdges()->Sorter.sort()

The vulnerability is triggered by a user uploading a graph that (or modifying an existing graph so that it) has node that has a large, multiple of 6, number of adjacent nodes
(including reverse edges used in the capacity algorithm) and selecting to apply the capacity algorithm.

