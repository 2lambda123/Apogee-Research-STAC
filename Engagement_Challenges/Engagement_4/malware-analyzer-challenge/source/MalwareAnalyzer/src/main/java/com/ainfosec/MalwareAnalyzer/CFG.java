package com.ainfosec.MalwareAnalyzer;

import java.util.Set;
import java.util.HashSet;

public class CFG
{
	// Basic blocks of this function
	private Set<BasicBlock> blocks = new HashSet<BasicBlock>();
	
	// Entry points of functions called by this function
	private Set<Integer> call_targets = new HashSet<Integer>();
	
	// VA of function's entry point
	private Integer entrypoint;
	
	/**
	 * Constructor
	 * @param ep Entry point of the present function, as integer encoded virtual address
	 */
	public CFG(Integer ep)
	{
		setEntrypoint(ep);
	}
	
	
	/**
	 * Add new block to current function's CFG
	 * @param new_block New block to be added
	 */
	public void add_block(BasicBlock new_block)
	{
		blocks.add(new_block);
	}
	
	/**
	 * Getter for blocks
	 * @return Set of blocks
	 */
	public Set<BasicBlock> get_all_blocks()
	{
		return blocks;
	}
	
	/**
	 * Add new call target of the present function
	 * @param tgt Target address of a call instruction found in the present function.
	 */
	public void add_call_target(Integer tgt)
	{
		call_targets.add(tgt);
		return;
	}

	/**
	 * Getter for entry point
	 * @return Entry point
	 */
	public Integer getEntrypoint() {
		return entrypoint;
	}

	/**
	 * Setter for entry point
	 * @param entrypoint
	 */
	public void setEntrypoint(Integer entrypoint) {
		this.entrypoint = entrypoint;
	}
}
