package com.ainfosec.MalwareAnalyzer;


import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.NavigableSet;
import java.util.TreeSet;

/**
 * Stores information about malware samples that have been submitted via an add HTTP query.
 */
public class Database
{
	// Maps an MD5 sum to the corresponding Sample.
	private static HashMap<String, Sample> db = new HashMap<String, Sample>();
	
	// The set of MD5 sums that have already been submitted via an add request.
	private static Set<String> seen = new HashSet<String>();
	
	/**
	 * Adds a new malware sample to the database.
	 * @param md5 MD5 digest of the new sample to be added.
	 * @param s The sample to be added.
	 */
	public static void add_sample(String md5, Sample s)
	{
		db.put(md5, s);
		return;
	}
	
	/**
	 * Adds an MD5 to the set of previously seen MD5s.
	 * @param md5 The MD5 digest to add to the previously seen set.
	 */
	public static void see(String md5)
	{
		seen.add(md5);
		return;
	}
	
	/**
	 * Check if a malware sample has not already been submitted via an add request previously.
	 * @param md5 MD5 digest of malware sample to check.
	 * @return true if the has not been seen previously, false otherwise.
	 */
	public static boolean is_unknown(String md5)
	{
		return !seen.contains(md5);
	}
	
	/**
	 * Get an iterator over the entries present in the database.
	 * @return Iterator over the entries present in the database.
	 */
	public static Iterator<Map.Entry<String, Sample>> get_db_iterator()
	{
		return db.entrySet().iterator();		
	}

	/**
	 * Get a sample from the database by its MD5
	 * @param md5 MD5 digest of sample to be retrieved.
	 * @return The sample if it exists in the database; null otherwise.
	 */
	public static Sample get_sample_by_md5(String md5)
	{
		return db.get(md5);
	}
	
	/**
	 * Computes and returns the cosine similarity between a specified sample and every other sample in the database.
	 * @param query_sample_md5 The sample for which similarities are to be computed.
	 * @return Set of ComparisonResults, containing all of the computed similarities.
	 */
	public static NavigableSet<ComparisonResult> compute_all_similarities(String query_sample_md5)
	{
		Sample query_sample = get_sample_by_md5(query_sample_md5);
		
		// Results storage
		TreeSet<ComparisonResult> results = new TreeSet<ComparisonResult>();
		
		// Iterate over each sample in the database
		Iterator<Map.Entry<String, Sample>> it = Database.get_db_iterator();
		while(it.hasNext())
		{
			// Get sample
			Map.Entry<String, Sample> pair = (Map.Entry<String, Sample>) it.next();
			Sample next_sample = (Sample) pair.getValue();
			String next_sample_md5 = (String) pair.getKey();

			// Compute similarity
			double score = Analysis.compute_cosine_similarity(query_sample, next_sample);
			
			// Add computed similarity to results
			results.add(new ComparisonResult(score, next_sample_md5));
		}

		return results;
	}
}
