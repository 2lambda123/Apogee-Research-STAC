package com.ainfosec.MalwareAnalyzer;

import java.util.Set;

public class Dasm
{
	// Set of control flow graphs, one per function in the disassembly.
	private Set<CFG> cfgs;
	
	// Opcode mnemonic feature vector corresponding to the disassembly.
	private int fv[];
	
	/**
	 * Constructor
	 * @param _cfgs Control flow graphs
	 * @param _fv Feature vector
	 */
	public Dasm(Set<CFG> _cfgs, int[] _fv)
	{
		setCfgs(_cfgs);
		setFv(_fv);
	}
	
	/**
	 * Getter - cfgs
	 * @return cfgs
	 */
	public Set<CFG> getCfgs() {
		return cfgs;
	}
	
	/**
	 * Setter - cfgs
	 * @param cfgs New cfgs
	 */
	public void setCfgs(Set<CFG> cfgs) {
		this.cfgs = cfgs;
	}
	
	/**
	 * Getter - opcode mnemonic feature vector
	 * @return opcode mnemonic feature vector
	 */
	public int[] getFv() {
		return fv;
	}
	
	/**
	 * Setter - opcode mnemonic feature vector
	 * @param fv opcode mnemonic feature vector
	 */
	public void setFv(int fv[]) {
		this.fv = fv;
	}
	
	/**
	 * Returns the CFG whose corresponding function has entry point entry_point.
	 * @param entry_point The entry point.
	 * @return Desired control fow graph.
	 */
	public CFG getCFG(Integer entry_point)
	{
		for(CFG cfg : cfgs)
		{
			if(cfg.getEntrypoint().equals(entry_point))
			{
				return cfg;
			}
		}
		return null;
	}
	
}
