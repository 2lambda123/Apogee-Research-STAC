package com.ainfosec.MalwareAnalyzer;

import java.util.HashMap;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Set;
import java.util.TreeSet;

public class DasmDatabase
{
	// Maps an MD5 sum to the corresponding Disassembly.
	private static HashMap<String, Dasm> db = new HashMap<String, Dasm>();
	
	/**
	 * Add new dasm to the database.
	 * @param md5 User-supplied md5 digest corresponding to the dasm.
	 * @param dasm The dasm.
	 */
	public static void add_dasm(String md5, Dasm dasm)
	{
		db.put(md5, dasm);
	}
	
	/**
	 * Get the Dasm corresponding to specified md5
	 * @param md5 MD5 to which returned Dasm should correspond
	 * @return Corresponding Dasm
	 */
	public static Dasm get_dasm(String md5)
	{
		return db.get(md5);
	}
	
	/**
	 * Get set of all MD5s corresponding to entries in the dasm database
	 * @return Set of MD5s
	 */
	public static Set<String> get_all_dasm_md5s()
	{
		return db.keySet();
	}
	
	/**
	 * Compute the cosine similarity between the specified Dasm and all other Dasms in the database.
	 * @param query_dasm_md5
	 * @return Set of ComparisonResults, containing all of the computed similarities.
	 */
	public static NavigableSet<ComparisonResult> compute_all_similarities(String query_dasm_md5)
	{
		Dasm query_dasm = get_dasm(query_dasm_md5);
		
		// Results storage
		TreeSet<ComparisonResult> results = new TreeSet<ComparisonResult>();		
		
		// For each (md5, dasm) pair in the dasm database
		for(Map.Entry<String, Dasm> next_entry : db.entrySet())
		{
			String cur_md5 = next_entry.getKey();
			Dasm cur_dasm = next_entry.getValue();
			
			// Skip the entry for the user-specified query dasm
			if(!query_dasm_md5.equals(cur_md5))
			{
				double score = Analysis.compute_cosine_similarity(query_dasm, cur_dasm);
				results.add(new ComparisonResult(score, cur_md5));
			}
		}		
		return results;
	}
}
