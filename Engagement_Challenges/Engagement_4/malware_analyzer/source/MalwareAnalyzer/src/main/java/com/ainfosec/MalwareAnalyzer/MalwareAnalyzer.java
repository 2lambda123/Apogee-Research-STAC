/*
 * Malware Analyzer - STAC challenge problem.
 * By Craig Miles @ AIS
 * 
 * Implements a malware analyst triage system for new malware binaries.
 * Determines whether a new malware binary was packed by an executable packer
 * and returns a list of the five most similar other malware.
 * Also provides utilities for constructing a control flow graph for working
 * with objdump disassemblies, such as location of functions and the construction
 * of control flow graphs.
 * 
 * Possible Inputs: Malware Binary, Byte-Count Feature Vector, objdump disassembly
 * 
 * STAC: Intentionally contains a divide by zero exception that can cause
 * the size of the log file to grow beyond a specified utilization threshold.
 */

package com.ainfosec.MalwareAnalyzer;

import java.io.IOException;


/**
 * Contains main, starts the HTTP server.
 */
public class MalwareAnalyzer
{		
	public static void main(String[] args)
	{
		try
		{
			X86.initialize();
			new Server(8001); // Initialize the HTTP server on port 8001.
		}
		catch (IOException e)
		{
			System.out.println("Error starting HTTP server, exiting.");
			System.exit(1);
		}
    }
}
