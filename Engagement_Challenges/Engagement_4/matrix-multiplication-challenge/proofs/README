## run_test.py:
    
    Generates random vulnerable and good input matrices starting at size
    startingSize and increasing by <interval> up to <endingSize>. These
    matrices are run through all supported operations and the results are
    stored in the logs/ directory.

	python run_test.py <startingSize> <ending matrix size> <interval>
 

### generate_random_cpsp_graph.py:

  Generates a random graph  of size n where each pair of nodes are connected with
  probability = 1/2.
	python generate_random_cpsp_graph.py n > outputFile 


### send_cpsp.py

  Sends the shortest path computation to the service and retrieves the result
	python send_cpsp.py <local port> <inputMatrix> <columnVector> <outputFile>

### send_laplacian.py:
 
  Demonstration script to interact with web service to compute graph laplacians 
	python send_laplacian.py <local port> <inputAdjacencyMatrix> <outputFile>

### send_mst.py:

 Demonstration script to interact with web service to compute the MST of a graph 
	python send_mst.py <local port> <inputGraph> <outputFile>


### generate_bad_input.py:

 Generates a sparse, asymmetric matrix of size N and stores it in outputFile
 	python generate_good_bad.py N > outputFile

### generate_good_input.py:

  Generates a dense, symmetric matrix of size N and stores it in outputFile
	python generate_good_input.py N > outputFile


To send these multiplication operations to the service, we provide an example
script. Note that the "bad" input must be in the place of inputFile1 if we
want the vulnerability to be realized

### send_mul.py:

	Sends a multiplication task to the linear algebra service
		python send_mul.py <local port> <inputFile1> <inputFile2> <desiredoutputFile> 

