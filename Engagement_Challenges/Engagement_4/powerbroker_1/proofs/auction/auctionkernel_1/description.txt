bid_amount_1 Bid Amount Side Channel
------------------------------------
Side Channel Vulnerability
Type: Time

The peer-to-peer auction protocol is vulnerable to a timing side channel attack that allows
an attacker to guess a user's bid within some margin of error.  Specifically, the creation of
a bid comparison message is slow and takes time proportional to a function of that user's bid.

NOTE: - bid_amount_0 and bid_amount_1 are vulnerable to the same attack.
      - PowerBroker and BidPal both contain this vulnerability, but they require separate analysis and attacks.
        Blue teams will NOT be able to use the same exploit for both programs.

Of the two vulnerable versions, this one is more obvious, as the loop is indexed from the
bid value, and the expensive function is blatantly expensive at all times.

In the vulnerable portion of BidComparisonData.create(), we have:
array = z;
for (int i=myBid; i<=maxBid; i++){
    BigInteger g = modifier.modifier(y[i], maxBid/2, p);
    array[i] = z[i].add(g);
}

where Modifier.modifier(a, b, n) has the behavior of multiplying a by itself (mod n) b times (implemented in a non-obvious manner)

The bid comparison message is the message that a user A sends to another user B to allow
B to determine whether his bid is greater than or equal to B's, without revealing A's bid.

A passive attacker can measure the time it takes a user to create this message by observing the
time between that user sending a bid receipt message and sending a bid comparison message (to the same user).

Our attack proof computes a database of timings for a few different bid amounts and uses
these to interpolate a guess of the bid amount in an observed session.

The most relevant methods in PowerBroker include the following: (Note that transformers may change class and method names.)
-The power profile is processed in com.cyberpointllc.stac.powerbroker.PowerBroker:processFromFile()
-The amount to bid on a particular auction is calculated in com.cyberpointllc.stac.powerbroker.PowerBroker.calcAmountToBid()
-PowerBroker messages are received and phases are handled in com.cyberpointllc.stac.powerbroker.phase.PhaseManager (this class implements the com.cyberpointllc.stac.comms.CommsHandler interface to handle messages to/from other connected users)
-Auction-specific messages are received  in com.cyberpointllc.stac.auction.AuctionHandler.handle().  In particular, this is where a BidCommitment is received
-Creation of a BidComparison message is initiated in com.cyberpointllc.stac.auction.AuctionProcessor.processBidCommitment()
-Creation of a BidComparsion message is performed com.cyberpointllc.stac.auction.messagedata.BidComparisonData.create()

checksum_ac_2 Safe Checksum
------------------------------------------------
Benign

After a comparison message is created, some checks are performed, which are meant to look like typical checks for validity of the username
and auction id, and a sanity check on the bytes of the serialized message.  Were these checks to fail, the program would repeatedly re-create
the message (which is already expensive to create), which would cause the program to exceed its time budget.  However, these checks have been designed so
that they cannot fail.

