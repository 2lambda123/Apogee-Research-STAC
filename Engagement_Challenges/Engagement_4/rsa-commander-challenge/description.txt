RSA Commander
=============

RSA Commander is a basic P2P messaging application. Any user is able to send any other user an RSA/DES encrypted message with an OpenSSL private key, provided they know the hostname and port of another RSA Commander instance.

Usage
-----
This is a __single jar__ application.

Usage: *java -Xint -jar challenge_program.jar -c -ckey client_private_key.pem*

Options:
    --client (-c)           This one must always be present in order to start client mode
    --client-key (-ckey)    An OpenSSL Private key file (RSA key file ending in .pem)
    --bind-address (-b)     The hostname to bind to... (Probably localhost in your case)
    --bind-port (-p)        The port to bind to (Must be unique to each RSA Commander instance)

By default the commander will bind to localhost:8080. In order to message another instance, they will need to be on separate ports.
There are two included keys.

There are two provided keys so that you can start two instances of the application. Any key will work for the challenge, but they aren't valid attacker inputs.

Interaction
-----------
RSA Commander exposes a messaging service on a TCP port. All interactions with this port are valid challenge inputs. All other inputs are off limits.

Supported Operations
--------------------

There are three available commands (help, send, exit). The first and last are obvious.

Sending a message:

The command "send <destination> <port>" will start the message input mode of the application. In this mode you will be asked for the
receiver name and the message body. The message body is terminated by the statement 'EOM' on a new line followed immediately by another
new line.

Receiving a message:

All instances of RSA commander are listening on the commandline provided port where they have a listening thread that handles all
message streams.


