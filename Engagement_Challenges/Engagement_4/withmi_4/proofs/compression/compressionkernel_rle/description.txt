rle_4 Run Length Encoding Based Compression Algorithm with disk space vulnerability 
in decompression
----------------------------------
Algorithmic Complexity Vulnerability
Type: Space

This article uses compression/decompression with run length encoding.  This simply compresses consecuive identical
bits within a file.  E.g., "00000011100000" would be represented "0-6-1-3-0-5".

This version has an error in the guard that is supposed to prevent a file from being compressed to greater than the
specified maximum size.  An int, instead of a long, is used to track the number of bytes that have been decompressed so far,
This value can overflow, causing a failure to detect that the maximum size has been exceeded.

The vulnerability can be exploited by a user (the attacker) sending a malicious file to another (the victim).  The victim's WithMi Client will follow the
following chain of method calls: (Note that package, class, and method names may be modified by transformers.)

withmi.WithMi.handle() (this receives the message)
withmi.WithMiDispatcher.handleMessage() (this puts the message in a queue for processing)
withmi.WithMiDispatcher.MessageHandler.run() (this gets called to process the message when it is removed from the queue)
withmi.filetransfer.FileTransfer.receive() (this pulls the file content out of the message(s) â€“ file content may be spread over multiple messages)
In the "overflow" vulnerability, the vulnerability lies in the lines:

int totalSize = 0;  // this should be a long, otherwise, we'll never detect that we've exceeded MAX_SIZE
// make sure we haven't exceeded MAX_SIZE
totalSize += num;
if (totalSize > MAX_SIZE){
      throw new IOException("Decompressed data exceeded maximum allowed size ");
}
